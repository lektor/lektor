import sys
from logging import Logger
from typing import Any
from typing import Iterable
from typing import Iterator
from typing import List
from typing import Optional
from typing import Pattern
from typing import Sequence
from typing import Tuple
from typing import Union

if sys.version_info >= (3, 8):
    from typing import Final
    from typing import Literal
else:
    from typing_extensions import Final
    from typing_extensions import Literal

_EventType = Literal["moved", "deleted", "created", "modified", "closed"]

EVENT_TYPE_MOVED: Final[_EventType]
EVENT_TYPE_DELETED: Final[_EventType]
EVENT_TYPE_CREATED: Final[_EventType]
EVENT_TYPE_MODIFIED: Final[_EventType]
EVENT_TYPE_CLOSED: Final[_EventType]

class FileSystemEvent:
    # event_type: _EventType
    # is_directory: bool
    is_synthetic: bool
    def __init__(self, src_path: str) -> None: ...
    @property
    def src_path(self) -> str: ...
    @property
    def key(self) -> Tuple[Union[str, bool], ...]: ...
    def __eq__(self, event: "FileSystemEvent") -> bool: ...  # type: ignore[override]
    def __ne__(self, event: "FileSystemEvent") -> bool: ...  # type: ignore[override]
    def __hash__(self) -> int: ...

class FileSystemMovedEvent(FileSystemEvent):
    event_type: Final[_EventType]
    is_directory: Final[bool]
    def __init__(self, src_path: str, dest_path: str) -> None: ...
    @property
    def dest_path(self) -> str: ...
    @property
    def key(self) -> Tuple[_EventType, str, str, bool]: ...

class FileDeletedEvent(FileSystemEvent): ...
class FileModifiedEvent(FileSystemEvent): ...
class FileCreatedEvent(FileSystemEvent): ...
class FileMovedEvent(FileSystemMovedEvent): ...
class FileClosedEvent(FileSystemEvent): ...
class DirDeletedEvent(FileSystemEvent): ...
class DirModifiedEvent(FileSystemEvent): ...
class DirCreatedEvent(FileSystemEvent): ...
class DirMovedEvent(FileSystemMovedEvent): ...

class FileSystemEventHandler:
    def dispatch(self, event: FileSystemEvent) -> None: ...
    def on_any_event(self, event: FileSystemEvent) -> None: ...
    def on_moved(self, event: Union[DirMovedEvent, FileMovedEvent]) -> None: ...
    def on_created(self, event: Union[DirCreatedEvent, FileCreatedEvent]) -> None: ...
    def on_deleted(self, event: Union[DirDeletedEvent, FileDeletedEvent]) -> None: ...
    def on_modified(
        self, event: Union[DirModifiedEvent, FileModifiedEvent]
    ) -> None: ...
    def on_closed(self, event: FileClosedEvent) -> None: ...

class PatternMatchingEventHandler(FileSystemEventHandler):
    def __init__(
        self,
        patterns: Optional[Sequence[str]] = ...,
        ignore_patterns: Optional[Sequence[str]] = ...,
        ignore_directories: bool = ...,
        case_sensitive: bool = ...,
    ) -> None: ...
    @property
    def patterns(self) -> Optional[Sequence[str]]: ...
    @property
    def ignore_patterns(self) -> Optional[Sequence[str]]: ...
    @property
    def ignore_directories(self) -> bool: ...
    @property
    def case_sensitive(self) -> bool: ...
    def dispatch(self, event: FileSystemEvent) -> None: ...

class RegexMatchingEventHandler(FileSystemEventHandler):
    def __init__(
        self,
        regexes: Optional[Union[str, Iterable[str]]] = ...,
        ignore_regexes: Optional[Iterable[str]] = ...,
        ignore_directories: bool = ...,
        case_sensitive: bool = ...,
    ) -> None: ...
    @property
    def regexes(self) -> List[Pattern[str]]: ...
    @property
    def ignore_regexes(self) -> List[Pattern[str]]: ...
    @property
    def ignore_directories(self) -> bool: ...
    @property
    def case_sensitive(self) -> bool: ...
    def dispatch(self, event: FileSystemEvent) -> None: ...

class LoggingEventHandler(FileSystemEventHandler):
    logger: Any
    def __init__(self, logger: Optional[Logger] = ...) -> None: ...
    def on_moved(self, event: Union[DirMovedEvent, FileMovedEvent]) -> None: ...
    def on_created(self, event: Union[DirCreatedEvent, FileCreatedEvent]) -> None: ...
    def on_deleted(self, event: Union[DirDeletedEvent, FileDeletedEvent]) -> None: ...
    def on_modified(
        self, event: Union[DirModifiedEvent, FileModifiedEvent]
    ) -> None: ...

def generate_sub_moved_events(
    src_dir_path: str, dest_dir_path: str
) -> Iterator[Union[DirMovedEvent, FileMovedEvent]]: ...
def generate_sub_created_events(
    src_dir_path: str,
) -> Iterator[Union[DirCreatedEvent, FileCreatedEvent]]: ...
