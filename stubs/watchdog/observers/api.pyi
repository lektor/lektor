import sys
from numbers import Real
from typing import Set
from typing import Tuple
from typing import Type

if sys.version_info >= (3, 8):
    from typing import Final
else:
    from typing_extensions import Final

from watchdog.events import FileSystemEvent
from watchdog.events import FileSystemEventHandler
from watchdog.utils import BaseThread
from watchdog.utils.bricks import SkipRepeatsQueue

DEFAULT_EMITTER_TIMEOUT: Final[int]
DEFAULT_OBSERVER_TIMEOUT: Final[int]

class EventQueue(SkipRepeatsQueue): ...

class ObservedWatch:
    def __init__(self, path: str, recursive: bool) -> None: ...
    @property
    def path(self) -> str: ...
    @property
    def is_recursive(self) -> bool: ...
    @property
    def key(self) -> Tuple[str, bool]: ...
    def __eq__(self, watch: ObservedWatch) -> bool: ...  # type: ignore[override]
    def __ne__(self, watch: ObservedWatch) -> bool: ...  # type: ignore[override]
    def __hash__(self) -> int: ...

class EventEmitter(BaseThread):
    def __init__(
        self, event_queue: EventQueue, watch: ObservedWatch, timeout: Real = ...
    ) -> None: ...
    @property
    def timeout(self) -> Real: ...
    @property
    def watch(self) -> ObservedWatch: ...
    def queue_event(self, event: FileSystemEvent) -> None: ...
    def queue_events(self, timeout: Real) -> None: ...
    def run(self) -> None: ...

class EventDispatcher(BaseThread):
    def __init__(self, timeout: Real = ...) -> None: ...
    @property
    def timeout(self) -> Real: ...
    @property
    def event_queue(self) -> EventQueue: ...
    def dispatch_events(self, event_queue: EventQueue) -> None: ...
    def run(self) -> None: ...

class BaseObserver(EventDispatcher):
    def __init__(
        self, emitter_class: Type[EventEmitter], timeout: Real = ...
    ) -> None: ...
    @property
    def emitters(self) -> Set[EventEmitter]: ...
    def start(self) -> None: ...
    def schedule(
        self, event_handler: FileSystemEventHandler, path: str, recursive: bool = ...
    ) -> ObservedWatch: ...
    def add_handler_for_watch(
        self, event_handler: FileSystemEventHandler, watch: ObservedWatch
    ) -> None: ...
    def remove_handler_for_watch(
        self, event_handler: FileSystemEventHandler, watch: ObservedWatch
    ) -> None: ...
    def unschedule(self, watch: ObservedWatch) -> None: ...
    def unschedule_all(self) -> None: ...
    def on_thread_stop(self) -> None: ...
    def dispatch_events(self, event_queue: EventQueue) -> None: ...
