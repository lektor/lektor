[tox]
minversion = 4.1
envlist =
    pre-commit
    {py39,py310,py311,py312,py313}{,-mistune0}
    py311-noutils
    py311-tzdata
    cover-{clean,report}
isolated_build = true

[python-cli-options]
byte-errors = -bb
max-isolation = -E -s -I
warnings-to-errors = -Werror

[gh-actions]
python =
    3.9: py39, cover
    3.10: py310, cover
    3.11: py311, cover
    3.12: py312, cover
    3.13: py313, cover

[testenv]
commands =
    coverage run -m pytest {posargs:tests -ra --durations=20}
passenv = USERNAME
setenv =
    # skip building frontend js/css
    HATCH_BUILD_NO_HOOKS=true
    # do not run marked slow tests in every variant testenv
    {mistune0,noutils,tzdata}: PYTEST_ADDOPTS=-m "not slowtest"
deps =
    pytest>=6
    pytest-click
    pytest-mock
    coverage[toml]
    importlib_metadata; python_version<"3.10"
    iniconfig
    hatchling
    mistune0: mistune<2
    tzdata: tzdata
depends =
    py{39,310,311,312,313}: cover-clean
    cover-report: py{39,310,311,312,313}{,-mistune0,-noutils,-tzdata}
# XXX: I've been experiencing sporadic failures when running tox in parallel mode.
# The crux of the error messages when this happens appears to be something like:
#
#     WARNING: Skipping page https://pypi.org/simple/coverage/ because the GET request
#         got Content-Type: Unknown. The only supported Content-Types are
#         application/vnd.pypi.simple.v1+json, application/vnd.pypi.simple.v1+html, and
#         text/html
#
#     ERROR: Could not find a version that satisfies the requirement
#         coverage[toml] (from versions: none)
#
# It may be this issue: https://github.com/pypa/pip/issues/11340
#
# Setting download=true — which tells tox to upgrade pip to the latest version —
# seems to fix the issue for me.
#
# Hopefully, at some point this can be removed.
download = true

[testenv:py{39,310,311,312,313}-noutils]
# To test in environment without external utitilities like ffmpeg and git installed,
# break PATH in noutils environment(s).
allowlist_externals = env
commands =
    env PATH="{env_bin_dir}" coverage run -m pytest {posargs:tests -ra --durations=20}

[testenv:pre-commit]
description =
  Run the quality checks under {basepython}; run as
  `SKIP=check-id1,check-id2 tox r -e pre-commit` to instruct the underlying
  `pre-commit` invocation avoid running said checks; Use
  `tox r -e pre-commit -- check-id1 --all-files` to select checks matching IDs
  aliases{:} `tox r -e pre-commit -- mypy --all-files` will run 3 MyPy
  invocations, but `tox r -e pre-commit -- mypy-py313 --all-files` runs one.
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m pre_commit \
      run \
      --color=always \
      --show-diff-on-failure \
      {posargs:--all-files}

  # Print out the advice on how to install pre-commit from this env into Git:
  -{envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'cmd = "{envpython} -m pre_commit install"; \
      scr_width = len(cmd) + 10; \
      sep = "=" * scr_width; \
      cmd_str = "    $ \{cmd\}";' \
      'print(f"\n\{sep\}\nTo install pre-commit hooks into the Git repo, run:\
      \n\n\{cmd_str\}\n\n\{sep\}\n")'
commands_post =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, pathlib, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      project_root_path = pathlib.Path(r"{toxinidir}"); \
      test_results_dir = pathlib.Path(r"{temp_dir}") / ".test-results"; \
      coverage_result_files = ",".join(\
        str(xml_path.relative_to(project_root_path)) \
        for xml_path in test_results_dir.glob("mypy--py-*{/}cobertura.xml")\
      ); \
      gh_output_fd = open(\
        os.environ["GITHUB_OUTPUT"], encoding="utf-8", mode="a",\
      ); \
      print(\
        f"cov-report-files={coverage_result_files !s}", file=gh_output_fd\
      ); \
      print("codecov-flags=MyPy", file=gh_output_fd); \
      gh_output_fd.close()'
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import itertools, os, pathlib, shlex, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      test_results_dir = pathlib.Path(r"{temp_dir}") / ".test-results"; \
      text_and_json_reports = itertools.chain( \
        test_results_dir.glob("mypy--py-*{/}*.json"), \
        test_results_dir.glob("mypy--py-*{/}*.txt"), \
      ); \
      report_contents = { \
        report{:} report.read_text() \
        for report in text_and_json_reports \
      }; \
      reports_summary_text_blob = "\n\n".join( \
        f"\N\{NUMBER SIGN\}\N\{NUMBER SIGN\} {report_path.parent.name}{:} " \
        f"`{report_path.name}`\n\n" \
        f"```{report_path.suffix[1:]}\n{report_text}\n```\n" \
        for report_path, report_text in report_contents.items() \
      ); \
      gh_summary_fd = open( \
        os.environ["GITHUB_STEP_SUMMARY"], encoding="utf-8", mode="a", \
      ); \
      print(reports_summary_text_blob, file=gh_summary_fd); \
      gh_summary_fd.close()'
  # Print out the output coverage dir and a way to serve html:
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c\
      'import os, pathlib, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" and sys.exit(); \
      len(sys.argv) >= 3 and all(\
        arg != "mypy" and not arg.startswith("mypy-py3") \
        for arg in sys.argv \
      ) and sys.exit(); \
      project_root_path = pathlib.Path(r"{toxinidir}"); \
      test_results_dir = pathlib.Path(r"{temp_dir}") / ".test-results"; \
      coverage_html_report_urls = [\
        f"file://\{xml_path !s\}" \
        for xml_path in test_results_dir.glob("mypy--py-*{/}index.html")\
      ]; \
      coverage_html_report_urls or sys.exit(); \
      coverage_html_report_open_cmds = [\
      f"python3 -Im webbrowser \N\{QUOTATION MARK\}\{html_url !s\}\N\{QUOTATION MARK\}" \
      for html_url in coverage_html_report_urls\
      ]; \
      coverage_html_report_open_cmds_blob = "\n\n\t".join(\
        coverage_html_report_open_cmds,\
      ); \
      print(\
        f"\nTo open the HTML coverage reports, run\n\n\
        \t\{coverage_html_report_open_cmds_blob !s\}\n"\
      ); \
      print(\
        f"[*] Find rest of JSON and text reports, are in the same directories."\
      )\
      ' \
    {posargs:--all-files}
deps =
  pre-commit >= 4, < 5
isolated_build = true
package = skip
pass_env =
  {[testenv]pass_env}
  SKIP  # set this variable

[testenv:cover-clean]
deps = coverage[toml]
skip_install = true
commands = coverage erase

[testenv:cover-report]
deps = coverage[toml]
skip_install = true
commands =
    -coverage combine --append
    coverage xml
    coverage report

[flake8]
max-line-length = 91
extend-ignore =
    # E203: Whitespace before ':'
    E203,
    # E402: Module level import not at top of file
    E402
