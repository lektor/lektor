name: Create and publish Docker image

on:
  - push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: pip install 'setuptools_scm[toml]'

      - name: Get Lektor version
        id: lektor
        run: |
          lektor_version=$(
            python -c "from setuptools_scm import get_version; print(get_version())"
          )
          echo "::set-output name=version::${lektor_version}"
          echo "::notice title=Lektor Version::${lektor_version}"

      - name: Log in to the container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: DWIM tags and labels for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.version=${{ steps.lektor.outputs.version }}

      - uses: docker/setup-buildx-action@v1
        id: buildx

      - uses: docker/build-push-action@v2
        id: build
        with:
          context: .
          build-args: |
            LEKTOR_VERSION=${{ steps.lektor.outputs.version }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Report container details
        run: |
          echo "::notice title=Built Image::${{ fromJSON(steps.build.outputs.metadata)['image.name'] }}"
          echo "::notice title=Image Digest::${{ steps.build.outputs.digest }}"
