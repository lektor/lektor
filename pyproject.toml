[build-system]
requires = ["setuptools>=45", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

################################################################
#
# pytest
#
[tool.pytest.ini_options]
norecursedirs = ["venv", ".tox", ".git", "node_modules"]
addopts = "--strict-markers"
markers = [
    "requiresinternet: marks tests requiring an internet connection",
]


################################################################
#
# coverage
#
[tool.coverage.run]
source_pkgs = [
    "lektor",
]
omit = [
    # test_pluginsystem.py has a test that installs a Lektor plugin from PyPI
    # into a pytest temporary directory
    "*/pytest-*/*",
]
parallel = true

[tool.coverage.paths]
paths = [
    "lektor",
    ".tox/py*/*/lektor",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    '^\s*\.\.\.\s*$',
]

################################################################
#
# pylint
#
[tool.pylint.main]
ignore = [".git"]
load-plugins = "pylint.extensions.no_self_use"

[tool.pylint.format]
max-line-length = 91
max-module-lines = 2000

[tool.pylint.design]
max-attributes = 20
max-locals = 30
max-branches = 20
max-nested-blocks = 8
max-returns = 8

[tool.pylint."messages control"]
disable = [
    "redundant-u-string-prefix",
    "consider-using-f-string",
    "missing-docstring",
    "unused-argument",
    "redefined-outer-name",
    "invalid-name",
    "protected-access",
    "fixme",
    "broad-except",
    "redefined-builtin",
    "too-many-arguments",
    "too-few-public-methods",
    "too-many-public-methods",
    "duplicate-code",
    "unnecessary-dunder-call",
]

[tool.mypy]
files = ["$MYPY_CONFIG_FILE_DIR/lektor"]

plugins = [
    "marshmallow_dataclass.mypy",
]

show_error_codes = true
error_summary = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true

strict = true
#implicit_reexport = true

# We have just started to add annotation.  For now, ignore all errors
# by default. (This can be disabled on a per-package or per-module
# basis in the overrides.)
ignore_errors = true

[[tool.mypy.overrides]]
# Packages and modules we want to check
module = [
    "lektor.constants",
    "lektor.packages",
    "lektor.admin.*",
    "test_packages",
]
ignore_errors = false

[[tool.mypy.overrides]]
module = [
    "lektor.packages",
]
disallow_untyped_defs = false
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = [
    "lektor.admin.*",
]
disallow_untyped_calls = false
warn_return_any = false
